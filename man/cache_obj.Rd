% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgpins-GEN.R
\name{cache_obj}
\alias{cache_obj}
\title{Cache an object to a package's user-cache pins board}
\usage{
cache_obj(x, id, pkg)
}
\arguments{
\item{x}{An object, local file or remote URL to be cached.}

\item{id}{The pin name uniquely identifying \code{x} in the \code{pkg}'s user-cache pins board. A character scalar. Necessary to retrieve \code{x} again using
\code{\link[=get_obj]{get_obj()}}. An already existing pin named \code{id} will be silently overwritten.}

\item{pkg}{Package name. A character scalar.}
}
\value{
\code{x} invisibly.
}
\description{
This function stores an object in a package's user-cache pins board.
}
\details{
The exact date and time (UTC) of the pinning is stored as the additional metadata \code{cached} which is of type \link[base:integer]{integer}. You can restore the
actual datetime using \code{\link[lubridate:as_date]{lubridate::as_datetime(cached)}} (note that \code{\link[=ls_cache]{ls_cache()}} does this automatically).

See \code{\link[=call_to_name]{call_to_name()}} for a convenient way to create an \code{id} that uniquely identifies a function call. Or just use \code{\link[=with_cache]{with_cache()}}.
}
\examples{
\donttest{
library(magrittr)

# if the fn below would be part of a real package, we could instead define `this_pkg`
# globally using `this_pkg <- utils::packageName()`
this_pkg <- "not.a.real.pkg"

# let's define a fn that returns R pkg sys deps from cache
pkg_sys_deps <- function(pkg,
                         use_cache = TRUE,
                         cache_lifespan = "6h") {

  if (use_cache) {
    pin_name <- pkgpins::call_to_name()
    result <- pkgpins::get_obj(id = pin_name,
                               max_age = cache_lifespan,
                               pkg = this_pkg)
    fetch <- is.null(result)
      
  } else {
    fetch <- TRUE
  }
  
  if (fetch) {
    result <-
      jsonlite::fromJSON(txt = paste0("https://sysreqs.r-hub.io/pkg/", pkg),
                         simplifyVector = FALSE) \%>\%
      purrr::flatten()
  }
 
  if (use_cache & fetch) {
    pkgpins::cache_obj(x = result,
                       id = pin_name,
                       pkg = this_pkg)
  }

  result
}

# now get the sys deps for git2r for the first time (populating the cache)
pkg_sys_deps("git2r")}
\dontrun{
# for the `cache_lifespan` (we've set a default of 6h), the cached result will be returned
# (as long as `use_cache = TRUE`):
microbenchmark::microbenchmark(pkg_sys_deps("git2r"),
                               pkg_sys_deps("git2r", use_cache = FALSE),
                               times = 10)}
}
