% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgpins-GEN.R
\name{call_to_hash}
\alias{call_to_hash}
\title{Convert the calling function call to a hash}
\usage{
call_to_hash(
  n_generations_back = 1L,
  add_namespace = TRUE,
  exclude_args = c("use_cache", "cache_lifespan")
)
}
\arguments{
\item{n_generations_back}{The number of generations to go back. See \code{\link[=sys.parent]{sys.parent()}} for details. An integerish scalar.}

\item{add_namespace}{Whether to prefix the generated string with the \href{https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Namespaces}{namespace}
(i.e. package name) the called function belongs to (if any).}

\item{exclude_args}{Argument names to be ignored, i.e. excluded from the generated string. A character vector, or \code{NULL} for no excluded arguments.}
}
\value{
A character scalar.
}
\description{
Creates a string that uniquely identifies the function call of the calling function by the function's namespace, name and a hash of the specified arguments.
For example, when called \emph{inside} the function \code{foo()}, it will return
"foo-f5fafeed20ec9481" when \code{foo()} was called with
\code{foo(a = F, b = "bar", c = 1)}.
}
\details{
This function does evaluate object names passed as function arguments. I.e. the function call \code{foo(a = my_var)} will result in
"foo-fc5785e4ecf1995c" if \code{my_var}'s value is \code{100}, whereas it will become
"foo-0ac79dfa012e33af" if \code{my_var}'s value is \code{101}.
}
\examples{
# By default, the parent function call is returned ...
foo <- function(a, b, c) pkgpins::call_to_hash()
foo("ya", "hoo")

# ... but you can go back further and return e.g. the grandparent function call
foo <- function(a) pkgpins::call_to_hash(n_generations_back = 2L)
bar <- function(b) foo()
bar()

# Arguments can be excluded by name ...
foo <- function(x, y, z) pkgpins::call_to_hash(exclude_args = c("x", "z"))
# ... thus the following three calls will all result in the same hash
foo(1+1, 'ar', list('1,77'))
foo(y = 'ar', list('1,77'))
foo(, "ar",)
}
