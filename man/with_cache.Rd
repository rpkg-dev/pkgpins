% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgpins-GEN.R
\name{with_cache}
\alias{with_cache}
\title{Cache a function call}
\usage{
with_cache(
  .fn,
  ...,
  .use_cache = TRUE,
  .cache_lifespan = "1 day",
  .id = call_to_name(n_generations_back = 2L),
  .pkg
)
}
\arguments{
\item{.fn}{A function or formula.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function with up to two arguments: \code{.x} (single argument) or \code{.x} and \code{.y} (two arguments). The
\code{.} placeholder can be used instead of \code{.x}. This allows you to create very compact anonymous functions (lambdas) with up to two inputs. See
\code{\link[rlang:as_function]{rlang::as_function()}} for details.}

\item{...}{Additional arguments passed on to \code{.fn}.}

\item{.use_cache}{Return cached results if possible. If \code{FALSE}, results are always newly fetched regardless of \code{cache_lifespan}.}

\item{.cache_lifespan}{The duration after which cached results are refreshed (i.e. newly fetched). A valid \link[lubridate:as.duration]{lubridate duration}. Only relevant if \code{use_cache = TRUE}.}

\item{.id}{The pin name uniquely identifying \code{x} in the \code{.pkg}'s user-cache pins board. A character scalar. An already existing pin named \code{.id} will be
silently overwritten.}

\item{.pkg}{Package name. A character scalar.}
}
\value{
The result of calling \code{.fn(...)}, from cache if \code{.use_cache = TRUE} and a cached result exists that hasn't exceeded \code{.cache_lifespan}.
}
\description{
This is a convenience wrapper to cache the result of calling a function \code{.fn(...)}.
}
\examples{
\donttest{
# if the fn below would be part of a real package, we could instead define `this_pkg`
# globally using `this_pkg <- utils::packageName()`
this_pkg <- "not.a.real.pkg"

# let's define a fn that returns R pkg sys deps from cache
pkg_sys_deps <- function(pkg,
                         use_cache = TRUE,
                         cache_lifespan = "6h") {
  pkgpins::with_cache(
    .fn = ~ purrr::flatten(jsonlite::fromJSON(txt = paste0("https://sysreqs.r-hub.io/pkg/", .x),
                                              simplifyVector = FALSE)),
    pkg,
    .use_cache = use_cache,
    .cache_lifespan = cache_lifespan,
    .pkg = this_pkg
  )
}
# now get the sys deps for git2r for the first time (populating the cache)
pkg_sys_deps("git2r")}
\dontrun{
# for the `cache_lifespan` (we've set a default of 6h), the cached result will be returned
# (as long as `use_cache = TRUE`):
microbenchmark::microbenchmark(pkg_sys_deps("git2r"),
                               pkg_sys_deps("git2r", use_cache = FALSE),
                               times = 10)}
}
