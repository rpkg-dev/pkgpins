% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkgpins.gen.R
\name{cachely}
\alias{cachely}
\title{Add caching to a function}
\usage{
cachely(
  pkg,
  fn_name,
  fn,
  pkg_versioned = TRUE,
  use_cache = TRUE,
  max_cache_age = "1 day"
)
}
\arguments{
\item{pkg}{Package name. A character scalar.}

\item{fn_name}{Name of the function to cache, i.e. the name of \code{fn}. A character scalar.}

\item{fn}{A function.}

\item{pkg_versioned}{Whether or not to make the caching dependent on the version number of \code{pkg}. If \code{FALSE}, caching is agnostic about \code{pkg}'s version
number. Otherwise, a separate user-cache pins board is created each time \code{pkg}'s version number changes (e.g. after an upgrade), ensuring to never return
cached results from a different (old) package version, irrespective of \code{max_cache_age}.}

\item{use_cache}{Return cached results if possible. If \code{FALSE}, results are always newly fetched regardless of \code{max_cache_age}.}

\item{max_cache_age}{The duration after which cached results are refreshed (i.e. newly fetched). A valid \link[lubridate:as.duration]{lubridate duration}. Use \code{Inf} to disable cache expiry. Only relevant if \code{use_cache = TRUE}.}
}
\value{
A modified version of \code{.fn} that uses caching.
}
\description{
One-stop solution to turn a function into one with caching. The caching is based on \emph{all} arguments of \code{.fn}. Use \code{\link[=with_cache]{with_cache()}} if you need more control.
}
\details{
Note that the returned function has \code{\link[=dots]{...}} in its signature instead of \code{fn}'s original formals. Use \code{\link[=with_cache]{with_cache()}} to create a function with a
specific signature.
}
\examples{
# if the fn below would be part of a real package, we could instead define `this_pkg` globally
# using `this_pkg <- utils::packageName()`; instead, we now cache to pkgpins's cache (which
# itself never uses the cache)
this_pkg <- "pkgpins"

# create a sleep function that caches sleeping (if only humans could do the same!)
sleepless <- pkgpins::cachely(pkg = this_pkg,
                              fn_name = "sleepless",
                              fn = \(x) { Sys.sleep(x); x },
                              max_cache_age = "1 year")
# populate the cache...
sleepless(0.5)
sleepless(3)

# ... and never sleep the same amount of time again (for the next year)
sleepless(0.5)
sleepless(3)

# note that the function gained additional caching-related arguments...
formals(sleepless)

# ... so you can still coerce it to sleep
sleepless(3,
          use_cache = FALSE)

# purge cache from the above example
pkgpins::board(pkg = "pkgpins") |> pkgpins::purge_cache()
}
\seealso{
Other high-level functions:
\code{\link{with_cache}()}
}
\concept{high_lvl}
